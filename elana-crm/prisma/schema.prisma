generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model VerificationToken {
  my_row_id  BigInt   @id @db.UnsignedBigInt
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model client {
  id          Int           @id @default(autoincrement())
  first_name  String        @db.VarChar(255)
  last_name   String        @db.VarChar(255)
  email       String        @unique(map: "Client_email_key")
  status      client_status @default(ACTIVE)
  date_joined DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  clientlog   clientlog[]
}

model clientlog {
  id          Int      @id @default(autoincrement())
  log_created DateTime @default(now())
  log_message String   @db.Text
  clientId    Int
  client      client   @relation(fields: [clientId], references: [id], onDelete: Cascade, map: "ClientLog_clientId_fkey")

  @@index([clientId], map: "ClientLog_clientId_fkey")
}

enum client_status {
  ACTIVE
  INACTIVE
  PENDING_PAYMENT
}
