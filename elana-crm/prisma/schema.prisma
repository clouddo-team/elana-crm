generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model VerificationToken {
  my_row_id  BigInt   @id @db.UnsignedBigInt
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model client {
  email             String        @unique(map: "Client_email_key") @db.VarChar(255)
  status            client_status @default(ACTIVE)
  address           String        @db.VarChar(255)
  comment           String?       @db.Text
  counterpart_id    String        @db.VarChar(100)
  counterpart_name  String        @db.VarChar(255)
  country           String        @default("Bulgaria") @db.VarChar(100)
  eurosys_id        Int           @id @default(autoincrement())
  ic_city           String        @default("Varna") @db.VarChar(100)
  language          String        @default("Bulgarian") @db.VarChar(50)
  name              String        @db.VarChar(255)
  phone             String        @db.VarChar(50)
  pro_retail        String        @default("retail") @db.VarChar(50)
  registration_date DateTime      @default(now())
  representative    String        @default("Dimitar") @db.VarChar(255)
  risk_profile      String        @default("no") @db.VarChar(10)
  type              client_type   @default(individual)
  id_expiry_date    DateTime      @default(now())
  emailedExpiredId  Boolean       @default(false)
  deals             deals[]       @relation("ClientDeals")
  log               log[]
}

model deals {
  id         Int       @id @default(autoincrement())
  eurosys_id Int
  date       DateTime  @default(now())
  status     String?   @db.VarChar(20)
  order_type String    @db.VarChar(100)
  code       String    @db.VarChar(100)
  currency   String    @db.VarChar(10)
  number     Int
  unit_price Float
  total      Float
  platform   String    @db.VarChar(50)
  settlement DateTime? @db.DateTime(0)
  client     client    @relation("ClientDeals", fields: [eurosys_id], references: [eurosys_id], onDelete: Cascade)

  @@index([eurosys_id], map: "Deals_eurosys_id_fkey")
}

model demo_client {
  id               Int      @id @default(autoincrement())
  email            String   @db.VarChar(255)
  name             String   @db.VarChar(255)
  phone            String   @db.VarChar(50)
  gdpr             Boolean
  gdpr_text        String   @default("none") @db.VarChar(500)
  demo_validity    DateTime
  country          String   @db.VarChar(100)
  city             String   @db.VarChar(100)
  IP               String   @default("0") @db.VarChar(45)
  language         String   @db.VarChar(50)
  mailer_lite_info String   @default("none") @db.VarChar(255)
  is_egt           Boolean
  is_bgt           Boolean
  is_f359          Boolean
}

model log {
  id         Int      @id @default(autoincrement())
  log        String   @db.Text
  date       DateTime @default(now())
  eurosys_id Int
  client     client   @relation(fields: [eurosys_id], references: [eurosys_id], onDelete: Cascade)

  @@index([eurosys_id], map: "log_eurosys_id_fkey")
}

enum client_status {
  ACTIVE
  INACTIVE
}

enum client_type {
  individual
  business
}
